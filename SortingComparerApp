/**
 * @author Patrick Roman
 * @author Trey Thibodeaux
 */

import java.util.*;

public class SortingComparer
{
   public static void main(String[] args)
   {
      fillTestArrays();
      setBuckets();
      System.out.println(displayResults());
   }
   
   static int[][] testArrays;
   static LinkedList<Integer>[] buckets;
   static final int MAX = 65535, BASE = 256;
   
   static void fillTestArrays()
   {
      testArrays = new int[4][];
      testArrays[0] = new int[1000];
      testArrays[1] = new int[10000];
      testArrays[2] = new int[100000];
      testArrays[3] = new int[1000000];
      Random r = new Random(0);
      int n = testArrays.length;
      for(int i = 0; i < n; i++)
      {
         int p = testArrays[i].length;
         for(int j = 0; j < p; j++)
            testArrays[i][j] = r.nextInt(MAX) + 1;
      }
    }
   
    static void setBuckets()
    {
       buckets = new LinkedList[BASE];
       for(int i = 0; i < BASE; i++)
          buckets[i] = new LinkedList();
    }
    
    static int[] getDuplicateArray(int[] testArray)
    {
       int n = testArray.length;
       int[] duplicateArray = new int[n];
       for(int i = 0; i < n; i++)
          duplicateArray[i] = testArray[i];
       return duplicateArray;
    }
    
    static void passAndDrop1(int[] array)
    {
       int n = array.length;
       int unitDigit = -1;
       for(int i = 0; i < n; i++)
       {
          unitDigit = array[i] % BASE;
          buckets[unitDigit].add(array[i]);
       }
    }
    
    static void passAndDrop2(int[] array)
    {
       int n = array.length;
       int nextDigit = -1;
       for(int i = 0; i < n; i++)
       {
          nextDigit = array[i] / BASE;
          buckets[nextDigit].add(array[i]);
       }
    }
    
    static void reorderArray(int[] array)
    {
       int arrayLength = array.length;
       int r = 0;
       while(r < arrayLength)
          for(int i = 0; i < BASE; i++)
             if(!buckets[i].isEmpty())
             {
                int n = buckets[i].size();
                for(int j = 0; j < n; j++)
                {
                   int k = buckets[i].removeFirst();
                   array[r] = k;
                   r++;
                }
             }
    }
    
    static int[] radixSort(int[] testArray)
    {
       int[] array = getDuplicateArray(testArray);
       passAndDrop1(array);
       reorderArray(array);
       passAndDrop2(array);
       reorderArray(array);
       return array;
    }
    
    static int[] javaSort(int[] testArray)
    {
       int[] array = getDuplicateArray(testArray);
       Arrays.sort(array);
       return array;
    }
    
    static long[] getRadixSortTimes()
    {
       int n = testArrays.length;
       long[] times = new long[n];
       for(int i = 0; i < n; i++)
       {
          long startTime = System.nanoTime();
          radixSort(testArrays[i]);
          long endTime = System.nanoTime();
          times[i] = endTime - startTime;
       }
       return times;
    }
    
    static long[] getJavaSortTimes()
    {
       int n = testArrays.length;
       long[] times = new long[n];
       for(int i = 0; i < n; i++)
       {
          long startTime = System.nanoTime();
          javaSort(testArrays[i]);
          long endTime = System.nanoTime();
          times[i] = endTime - startTime;
       }
       return times;
    }
    
    static String displayResults()
    {
       long[] radixTimes = getRadixSortTimes();
       long[] javaTimes = getJavaSortTimes();
       String answer = String.format("Input = 1000%n" + 
                                      String.format("%11d", radixTimes[0]) + " nanoseconds, RadixSort%n" +
                                      String.format("%11d", javaTimes[0]) + " nanoseconds, JavaSort%n" +
                                     "Input = 10000%n" + 
                                      String.format("%11d", radixTimes[1]) + " nanoseconds, RadixSort%n" +
                                      String.format("%11d", javaTimes[1]) + " nanoseconds, JavaSort%n" +
                                     "Input = 100000%n" + 
                                      String.format("%11d", radixTimes[2]) + " nanoseconds, RadixSort%n" +
                                      String.format("%11d", javaTimes[2]) + " nanoseconds, JavaSort%n" + 
                                     "Input = 1000000%n" + 
                                      String.format("%11d", radixTimes[3]) + " nanoseconds, RadixSort%n" +
                                      String.format("%11d", javaTimes[3]) + " nanoseconds, JavaSort");
       return answer;
    }
}
