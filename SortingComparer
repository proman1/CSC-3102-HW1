/**
 * @author Patrick Roman
 * @author Trey Thibodeaux
 */

import java.util.*;

public class SortingComparer {
    static final int MAX = 65535;   
    static final int BASE = 256;
    static LinkedList<Integer>[] queues;
    static int[][] testArrays;
    
    static void fillTestArrays() {       
       testArrays = new int[4][];
       testArrays[0] = new int[1000];
       testArrays[1] = new int[10000];
       testArrays[2] = new int[100000];
       testArrays[3] = new int[1000000];
       Random r = new Random();
       int n = testArrays.length;
       for(int i = 0; i < n; i++) {
          int p = testArrays[i].length;
          for(int j = 0; j < p; j++)
             testArrays[i][j] = r.nextInt(MAX) + 1;          
       }       
    }
    
    static void fillQueues() {
       queues = new LinkedList[BASE];
       for(int i = 0; i < BASE; i++)
          queues[i] = new LinkedList();       
    }
    
    /*
     * METHOD NOT FINISHED YET
     */
    static int[] radixSort(int[] array) {       
       
       int n = array.length;
       
       int[] duplicateArray = new int[n];
       
       for(int i = 0; i < n; i++) {
          int LCD = array[i] % BASE;
          queues[LCD].add(array[i]);
       }
       
       int k = 0;
       for(int i = 0; i < BASE; i++){
          int size = queues[i].size();
          for(int j = 0; j < size; j++) {
             duplicateArray[k] = queues[i].get(j).intValue();          
             k++;
          }
       }
       
    }
    
    
    public static void main(String[] args) {
        fillTestArrays();
        fillQueues();
    }
}
