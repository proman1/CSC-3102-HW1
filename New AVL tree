public class AVLTree 
{
    Node root;
    Node parent;
    int height;
    int balanceFactor;
    AVLTree left;
    AVLTree right;
    
public void rotateRight()
{
   Node rightChild = root.right;
    root.right = rightChild.left;
    rightChild.left = root;
}
public void rotateLeft(){
    Node leftChild = root.left;
    root.left = leftChild.right;
    leftChild.right = root;
}
    // Constructor
    AVLTree()
    {
       root = null;
       left = null;
       right = null;
       height = 0;
       balanceFactor = 0;
    }
    
    
    
    public void insert(Node base, Node newNode)
    {
        if(root == null)
        {
           root = newNode;
           height = 1;
        }
        else if(base.key < newNode.key)
           if(base.right != null)
              insert(base.right, newNode);
           else{
             base.right = newNode;
              if(base.balanceFactor == 0){
                balanceFactor = -1;
                height++;
              }
              else
                  balanceFactor = 0;
           }
        else if(base.key > newNode.key)
            if(base.left != null)
                insert(base.left , newNode);
             else{
             base.left = newNode;
              if(base.balanceFactor == 0){
                balanceFactor = 1;
                height++;
              }
              else
                  balanceFactor = 0;
              
    }
}
    public Node max(Node base){
        if(base.right != null){
            return max(base.right);
        }
        else 
            return base;
    }
    
    public Node min(Node base)
    {
        
        if(base.left != null){
            return min(base.left);
        }
        else
            return base;
    }
    
    public void inOrderTransversal(Node base){
        if(base.left != null)
            inOrderTransversal(base.left);
        System.out.println(base);
        if(base.right != null) 
            inOrderTransversal(base.right);
    }
    
    public void search(Node base, Node searchNode){
        
        if(base== null || base.key == searchNode.key){
            System.out.println("Found" + searchNode.key);
        }
        else{
            if(searchNode.key < base.key){
                search(base.left, searchNode);
            }
            else
                search(base.right, searchNode);
        }
    }
    
    public Node successor(Node n)
    {
        Node y;
        
        if(root.right != null){
           return min(root.right);
        }
        y = n.parent;
        while(y != null && n == y.right)
        {
            n = y;
            y = y.parent;
        }
        return y;
    }
    public Node predecessor(Node n)
    {
        Node y;
        
        if(root.left != null){
           return max(root.left);
        }
        y = n.parent;
        while(y != null && n == y.left)
        {
            n = y;
            y = y.parent;
        }
        return y;
    }
    
    
    // METHODS FOR AVL TREE
    /*
     * Insert
     * Min
     * Max
     * In-Order Traversal
     * Search
     * Successor
     * Predecessor
     * Select
     * Rank 
     */
    
   public class Node
   {
     int key;
     Node left;
     Node right;
     Node parent;
     int balanceFactor;
     int height;
     int size;

     Node()
     {
         key = -1;
         left = null;
         right = null;
         parent = null;
         height = 1;
         size = 1;
     }
     
     public int getHeight(){
         int r;
         int l;
         
         if(this.right == null){
             r = 0;
         }
         else {
             r = right.height;
         }
         if(this.left == null){
             l = 0;
         }
         else{
             l = left.height;
         }
             return l + r + 1;
     }
     
     public int size(){
         int rightSubTree;
         int leftSubTree;
        
         if(right == null){
             rightSubTree = 0;
         }
         else{
             rightSubTree = right.size;
         }
         if(left == null){
             leftSubTree = 0;
         }
         else{
             leftSubTree = left.size;
         }
         return leftSubTree + rightSubTree + 1;
     }
  }
    public static void main(String[] args) 
    {
        
        
        
    }
}
